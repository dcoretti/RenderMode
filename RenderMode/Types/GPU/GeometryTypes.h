#pragma once
/*
    General geometric data types used together to construct render engine commands for GPU loaded data.

    No handles are used at this level.  All structs are pod types of actual data used in commands.
*/

namespace GPU {
    /*
    container for buffer id to identify it on gpu for vertex, texture, normal, index buffers
    used in draw commands for static buffered objects on the gpu
    */
    struct GeometryBuffer {
        unsigned int bufferId;  // GPU id such as one generated by glGenBuffers
    };
    typedef GeometryBuffer TextureBuffer;

    
    struct VertexArrayObject {
        unsigned int vaoId;
    };


    struct DrawContext {
        unsigned int indexOffset;   // index of first vertex in buffer for this mesh.
        unsigned int numElements;
    };


    /*
        Layout of memory in a given buffer used for vertices, normals, etc.
        general components used in glAttributPointer
    */
    struct GeometryBufferLayout {
        GeometryBufferLayout(unsigned int numComponents, unsigned int stride) 
            : numComponents(numComponents), stride(stride) {}
        GeometryBufferLayout() = default;

        // add data type?
        unsigned int numComponents{ 3 }; // x,y,z = 3.  size input to glVertexAttribPointer
        unsigned int stride{ 0 };
    };

    // Byte format of texture data held in a system buffer
    enum TextureFormat {
        RGB,
        RGBA,
        BGR,
    };

    struct TextureBufferLayout {
        int width;
        int height;
        TextureFormat textureFormat;
    };

}
